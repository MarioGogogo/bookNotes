(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{213:function(t,a,r){"use strict";r.r(a);var e=r(0),v=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"单页面应用的代码分割"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单页面应用的代码分割","aria-hidden":"true"}},[t._v("#")]),t._v(" 单页面应用的代码分割")]),t._v(" "),r("h2",{attrs:{id:"解决什么问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解决什么问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 解决什么问题?")]),t._v(" "),r("p",[t._v("有效解决传统单页面应用脚本过大,加载时间过长的问题.")]),t._v(" "),r("p",[t._v("首先回顾下不采用代码分割的 SPA 方式")]),t._v(" "),r("p",[t._v("从生产---\x3e上线阶段.所有应用打包成 bundle.js.在不采用服务端渲染的条件下.打包脚本包含所有体积很大.如果增加第三方依赖包.体积问题可想而知.")]),t._v(" "),r("p",[t._v("让我们思考整个过程带来的问题:")]),t._v(" "),r("p",[t._v("任何脚本的改动.重新生成一个 bundle.js.作为用户每次 bundle.js 发生变化重新下载..")]),t._v(" "),r("p",[t._v('如果我们想到用"缓存".包住一些稳定的脚本.比如依赖库.我们将 bundle.js 分割成 vendor.js 和 app.js.')]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("包名")]),t._v(" "),r("th",[t._v("说明")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("vendor.js")]),t._v(" "),r("td",[t._v("所有稳定脚本打包进这里")])]),t._v(" "),r("tr",[r("td",[t._v("app.js")]),t._v(" "),r("td",[t._v("业务代码")])])])]),t._v(" "),r("h3",{attrs:{id:"基于业务的代码分割"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基于业务的代码分割","aria-hidden":"true"}},[t._v("#")]),t._v(" 基于业务的代码分割")]),t._v(" "),r("p",[t._v("进一步思考:对 app.js 脚本是否可以再分割?")]),t._v(" "),r("p",[t._v("比如应用包含,首页,登录页,和设置页三个页面.进入不同的页面时候.所加载的脚本不同.")]),t._v(" "),r("p",[r("img",{attrs:{src:"http://book.52react.cn/20191121133035.png",alt:""}})]),t._v(" "),r("h3",{attrs:{id:"合理选择分割纬度"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#合理选择分割纬度","aria-hidden":"true"}},[t._v("#")]),t._v(" 合理选择分割纬度")]),t._v(" "),r("p",[t._v("三种分割方式")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("按业务逻辑和依赖\n(前面已经介绍过了)")])]),t._v(" "),r("li",[r("p",[t._v("按路由分割\n需要整个路由的不同页面彼此独立.react-router 对实现路由层面的代码分割比较支持.\n但是这种分割方式会带来代码沉余.比如 20 多个路由.分割出 20 多个页面.20 多个脚本很容易产生重复的代码")])]),t._v(" "),r("li",[r("p",[t._v('按组件分割\n组件分"UI 组件"和"容器组件".代码分割时候.由容器组件控制,在容器组件实现按需加载 UI 组件.根据条件是否加载合适的 Ui 组件')])])]),t._v(" "),r("h3",{attrs:{id:"合理的加载时机"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#合理的加载时机","aria-hidden":"true"}},[t._v("#")]),t._v(" 合理的加载时机")]),t._v(" "),r("p",[t._v("分为 消极加载 和 积极加载")]),t._v(" "),r("p",[t._v("消极加载: 指不需要用户额外的交互便进行加载,加载由组件的某个生命周期函数或者相关的某些行为触发. 触发不依赖用户动作.")]),t._v(" "),r("p",[t._v("积极加载: 则依赖用户动作和页面进行交互.比如点击鼠标才触发 LoadableNewsPage 的 preload 事件")]),t._v(" "),r("h3",{attrs:{id:"代码分割工厂实例"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#代码分割工厂实例","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码分割工厂实例")]),t._v(" "),r("h4",{attrs:{id:"案例一个典型的三页面"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#案例一个典型的三页面","aria-hidden":"true"}},[t._v("#")]),t._v(" 案例一个典型的三页面")]),t._v(" "),r("p",[t._v("分别是登录页,注册页,和首页\n采用 webpack 中 CommonsChunkPlugin 插件完成配置工作")])])}],!1,null,null,null);a.default=v.exports}}]);